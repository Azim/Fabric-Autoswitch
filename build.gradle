buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id "com.github.fudge.forgedflowerloom" version "2.0.0"
	id 'maven-publish'
	id 'musical-code' version '1.0'
	id "com.modrinth.minotaur" version "1.1.0"
}

import com.modrinth.minotaur.TaskModrinthUpload

repositories {
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup "com.github.dexman545"
		}
	}
	maven {
		url 'https://maven.thebrokenrail.com'
		content {
			includeGroup "com.thebrokenrail"
		}
	}
}

musicalCode {
	config 'musical-config.txt'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

//noinspection SpellCheckingInspection
dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//OWNER library
	implementation "org.aeonbits.owner:owner:1.0.10"
	include "org.aeonbits.owner:owner:1.0.10"

	modApi 'com.github.dexman545:autoswitch-api:-SNAPSHOT'
	include 'com.github.dexman545:autoswitch-api:-SNAPSHOT'

	// Mod Compat

	// ModMenu
	modCompileOnly("io.github.prospector:modmenu:${project.modmenu_version}") {
		transitive = false
	}
	/*modRuntime("io.github.prospector:modmenu:${project.modmenu_version}") {
		transitive = false
	}*/

	// ModUpdater
	//modCompileOnly "com.thebrokenrail:modupdater:${project.modupdater_version}"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = targetVersion
	} else {
		it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
		it.targetCompatibility = JavaVersion.toVersion(targetVersion)
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		//noinspection GroovyAssignabilityCheck
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			//noinspection GroovyAssignabilityCheck
			artifact(remapJar) {
				//noinspection GroovyAssignabilityCheck
				builtBy remapJar
			}
			//noinspection GroovyAssignabilityCheck
			artifact(sourcesJar) {
				//noinspection GroovyAssignabilityCheck
				builtBy remapSourcesJar
			}
		}
	}
}

task publishModrinth (type: TaskModrinthUpload, dependsOn: build){
	token = System.getenv("MODRINTH")
	projectId = 'uSdcnlts'
	versionNumber = project.version
	uploadFile = jar.outputs.getFiles().asPath // This is the java jar task
	String gv = project.minecraft_version
	addGameVersion(gv)
	addLoader('fabric')
	versionName = "Autopublished (potentially) alpha build"
	changelog = "This is autopublished from github actions. Use at your own risk. See commit history or a release build for changes.\n\n" +
			"This build may work on Minecraft versions not specified on modrinth. Release cadance at time of writing " +
			"(12/27/2020):\n\n" +
			"1.x.x -> 1.14-1.15 | 2.x.x -> 1.16.x | 3.x.x -> 1.17.x"
	releaseType = getReleaseMonicker()

}

String getReleaseMonicker() {
	if (((String)project.version).contains('alpha')) return "alpha"
	if (((String)project.version).contains('beta')) return "beta"
	return "release"
}

// configure the maven publication
publishing {
	publications {
		//noinspection GroovyAssignabilityCheck
		maven(MavenPublication) {
			groupId = project.maven_group
			artifactId = project.archives_base_name // Must be lowercase
			version = project.version

			from components.java

			// add all the jars that should be included when publishing to maven
			//noinspection GroovyAssignabilityCheck
			artifact(remapJar) {
				//noinspection GroovyAssignabilityCheck
				builtBy remapJar
			}
			//noinspection GroovyAssignabilityCheck
			artifact(sourcesJar) {
				//noinspection GroovyAssignabilityCheck
				builtBy remapSourcesJar
			}
		}
	}
	// select the repositories you want to publish to
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/" + "dexman545/Fabric-Autoswitch"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

publish.finalizedBy(publishModrinth)
